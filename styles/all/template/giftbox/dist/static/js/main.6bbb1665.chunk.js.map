{"version":3,"sources":["context/unwrap-status.js","context/received-gift.js","components/UnwrapGift.js","components/DisplayGiftStatus.js","components/DisplayReceivedGift.js","reducers/unwrap-status.js","reducers/received-gift.js","components/App.js","serviceWorker.js","index.js"],"names":["UnwrapStatusContext","React","createContext","ReceivedGiftContext","UnwrapGift","props","useContext","unwrapStatus","unwrapStatusDispatch","receivedGiftDispatch","receivedGift","unwrap","fetch","then","response","json","type","gift","item","className","status","onClick","src","alt","zeroPad","num","places","zero","toString","length","Array","join","CountDown","time_left","useState","timeLeft","setTimeLeft","seconds","minutes","Math","floor","secondsString","seconds2timestring","hours","useEffect","countDownTimer","setInterval","clearInterval","DisplayGiftStatus","console","log","DisplayGiftImage","img_url","title","description","undefined","DisplayReceivedGift","unwrapStatusReducer","state","action","receivedGiftReducer","App","useReducer","item_type","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bbb1665.chunk.js","sourcesContent":["import React from 'react';\n\nconst UnwrapStatusContext = React.createContext();\n\nexport default UnwrapStatusContext;\n","import React from 'react';\n\nconst ReceivedGiftContext = React.createContext();\n\nexport default ReceivedGiftContext;\n","import React, { useState, useContext } from 'react';\nimport UnwrapStatusContext from '../context/unwrap-status.js';\nimport ReceivedGiftContext from '../context/received-gift.js';\n\nconst UnwrapGift = (props) => {\n  const { unwrapStatus, unwrapStatusDispatch } = useContext(UnwrapStatusContext);\n  const {receivedGift, receivedGiftDispatch} = useContext(ReceivedGiftContext);\n  const unwrap = () => {\n    fetch('/app.php/snahp/giftbox/unwrap/')\n      .then(response => response.json())\n      .then(json => {\n        receivedGiftDispatch({type: 'UPDATE_GIFT', gift: json.item})\n      });\n    unwrapStatusDispatch({type: 'SET_STATUS_OPENED'});\n  };\n  // <button onClick={unwrap} type=\"button\" className=\"btn btn-secondary btn-sm unwrap_button\">Unwrap Gift</button>\n  const UnwrapBody = ({ unwrapStatus }) => {\n    if (unwrapStatus.status==='closed')\n    {\n      return (\n        <>\n          <div className=\"gift_closed_content\">\n            <button onClick={unwrap} type=\"button\" className=\"unwrap_btn\">\n            <img className=\"gift_wreath_image\" src=\"https://i.imgur.com/B3fsORS.png\" alt=\"\"/>\n            </button>\n          </div>\n        </>\n      );\n    }\n    return '';\n  };\n  return <div className=\"gift_closed_wrapper\">\n    {\n      unwrapStatus.status==='closed' ? \n        <UnwrapBody unwrapStatus={unwrapStatus}></UnwrapBody>\n        :\n        ''\n    }\n  </div>;\n};\n\nexport default UnwrapGift;\n","import React from 'react';\nimport { Fragments } from 'react';\nimport { useContext, useEffect, useState } from 'react';\nimport UnwrapStatusContext from '../context/unwrap-status.js';\n\nconst zeroPad = (num, places) => {\n  const zero = places - num.toString().length + 1;\n  return Array(+(zero > 0 && zero)).join(\"0\") + num;\n};\n\nconst seconds2timestring = (seconds) => {\n  const minutes = Math.floor(seconds / 60);\n  const secondsString = zeroPad(seconds % 60, 2);\n  const hours = zeroPad(Math.floor(minutes / 60), 2);\n  const minutesString = zeroPad(minutes % 60, 2);\n  return [hours, minutesString, secondsString];\n};\n\nconst CountDown = ({time_left}) => {\n  let [timeLeft, setTimeLeft] = useState(time_left);\n  const { unwrapStatus, unwrapStatusDispatch } = useContext(UnwrapStatusContext);\n  const [hours, minutes, seconds] = seconds2timestring(timeLeft);\n  useEffect(() => {\n    const countDownTimer = setInterval(()=>{\n      if (timeLeft <= 0)\n      {\n        clearInterval(countDownTimer);\n        unwrapStatusDispatch({ type: 'SET_STATUS_CLOSED' });\n      }\n      else\n      {\n        setTimeLeft(timeLeft=timeLeft-1);\n      }\n    }, 1000);\n  }, []);\n  return ( \n    <>\n      <span className=\"giftbox_countdown_hours\">{hours}</span>\n      <span className=\"giftbox_countdown_minutes\">{minutes}</span>\n      <span className=\"giftbox_countdown_seconds\">{seconds}</span>\n    </>\n  );\n};\n\nconst DisplayGiftStatus = (props) => {\n  const { unwrapStatus, unwrapStatusDispatch } = useContext(UnwrapStatusContext);\n  console.log('::DisplayGiftStatus');\n  console.log(unwrapStatus);\n  if (unwrapStatus.status==='not_ready')\n  {\n    return ( \n      <div className=\"display_gift_status\">\n        <img className=\"giftbox_status_image\" src=\"https://i.imgur.com/8aA85qP.jpg\" />\n        <CountDown {...unwrapStatus}></CountDown>\n      </div>\n    );\n  }\n  return '';\n};\n\nexport default DisplayGiftStatus;\n","import React from 'react';\nimport { useContext } from 'react';\nimport ReceivedGiftContext from '../context/received-gift.js';\n\nconst DisplayGiftImage = ({type, title, description, img_url}) => {\n  return ( \n    type!==undefined &&\n  <div className=\"received-gift-wrapper\">\n    <div className=\"received-gift-content\">\n      <img className=\"giftbox-img\" src={img_url} alt=\"\" />\n    </div>\n  </div>);\n};\n\nconst DisplayReceivedGift = (props) => {\n  const {receivedGift, receivedGiftDispatch} = useContext(ReceivedGiftContext);\n  return <div>\n    <DisplayGiftImage {...receivedGift}></DisplayGiftImage>\n    </div>;\n};\n\nexport default DisplayReceivedGift;\n","const unwrapStatusReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_STATUS_CLOSED':\n      return {status: 'closed'};\n    case 'SET_STATUS_OPENED':\n      return {status: 'opened'};\n    case 'SET_STATUS_NOT_READY':\n      return {status: 'not_ready', time_left: action.time_left};\n    default:\n      return state;\n  }\n};\n\nexport default unwrapStatusReducer\n","const receivedGiftReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_GIFT':\n      return action.gift;\n    default:\n      return state;\n  }\n}\n\nexport default receivedGiftReducer;\n","import React from 'react';\nimport { useReducer, useEffect } from 'react';\nimport './base.css';\nimport UnwrapGift from './UnwrapGift.js';\nimport DisplayGiftStatus from './DisplayGiftStatus.js';\nimport DisplayReceivedGift from './DisplayReceivedGift.js';\nimport unwrapStatusReducer from '../reducers/unwrap-status.js';\nimport receivedGiftReducer from '../reducers/received-gift.js';\nimport UnwrapStatusContext from '../context/unwrap-status.js';\nimport ReceivedGiftContext from '../context/received-gift.js';\n\n\nconst App = (props) => {\n  const [unwrapStatus, unwrapStatusDispatch] = useReducer(unwrapStatusReducer, {status:''})\n  const [receivedGift, receivedGiftDispatch] = useReducer(receivedGiftReducer, {\n    item_type: undefined,\n  })\n  useEffect(() => {\n  fetch('/app.php/snahp/giftbox/unwrap_status/')\n    .then(response => response.json())\n    .then(json => {\n      console.log('::App.js');\n      console.log(json);\n      switch (json.status)\n      {\n        case 'not_ready':\n          unwrapStatusDispatch({\n            type: 'SET_STATUS_NOT_READY',\n            time_left: json.time_left\n          });\n          break;\n        case 'closed':\n        default:\n          unwrapStatusDispatch({\n            type: 'SET_STATUS_CLOSED'\n          });\n      }\n    });\n\n  }, []);\n  return <div className=\"giftbox-wrapper\">\n    <UnwrapStatusContext.Provider value={{ unwrapStatus, unwrapStatusDispatch }} >\n      <ReceivedGiftContext.Provider value={{ receivedGift, receivedGiftDispatch }}>\n        <DisplayGiftStatus></DisplayGiftStatus>\n        <DisplayReceivedGift></DisplayReceivedGift>\n        <UnwrapGift></UnwrapGift>\n      </ReceivedGiftContext.Provider>\n    </UnwrapStatusContext.Provider>\n  </div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('christmas-giveaway'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}